/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

//apply from: 'ImporttaskExample.gradle'
//task hello << {
//    println "Hello!!!"
//}
//hello << { println "Hello Again!!!"}
//task intro << {
//    println "This is gradle!!!"
//}
//intro.dependsOn hello



//Gradle Assignment:

apply plugin: 'java'

//Q6: Write a task in file "mytasks.gradle" and use it in your build.gradle

apply from: "mytasks.gradle"


//Q1: Look up java plugin documentation. Make changes in manifest to make it executable with correct class. 
// When run using java -jar JAR_NAME_HERE the output should be text "Hello World" on the console.

jar {
    manifest {
        attributes("Main-Class": "Application")
    }
}


//Q2: look up idea plugin. make changes in build.gradle so that the sources of 
// src/main/java as well as src/main/java2 are taken as sources. 
// Ensure that when you make JAR file class files in both are added to the JAR. 
// This will teach you how projects with non-conventional structure can be used with gradle.

sourceSets {
    source {
        main {
            java { 
                srcDirs = ['source/main/java', 'source/main/java2']
            }
        }
    }
}


//Q3:  add 2 files file1.xml and file1.txt in src/main/resources manually. 
// Make changes so that when creating jar only file1.xml is added to the jar. 

sourceSets {
    main {
        resources {
            srcDirs = [ 'source/main/resouces' ]
            exclude 'file1.txt'
        }
    }
}


//Q4 find how to what is an uberjar. Make changes so you can use commons lang3 StringUtil in your jar.
// Make this uber jar executable. The output should be text but that should be using the StringUtils class of commons lang3

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


//Q5: Find a maven repository and add it as a repository. You can use bintray, jcenter

repositories {
    jcenter()
    maven {
        url "https://mvnrepository.com/artifact/org.springframework/spring-aop"
    }
}



